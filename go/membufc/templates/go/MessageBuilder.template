// builder

type {{.MessageName}}Builder struct {
	builder membuffers.Builder
{{range .MessageFields}}	{{.FieldName}} {{if .IsArray}}[]{{end}}{{if .IsMessage}}*{{.FieldGoType}}Builder{{else}}{{.FieldGoType}}{{end}}
{{end}}}
{{range .MessageFields}}{{if and .IsMessage .IsArray}}
func (w *{{.MessageName}}Builder) arrayOf{{.FieldName}}() []membuffers.MessageBuilder {
	res := make([]membuffers.MessageBuilder, len(w.{{.FieldName}}))
	for i, v := range w.{{.FieldName}} {
		res[i] = v
	}
	return res
}
{{end}}{{end}}
func (w *{{.MessageName}}Builder) Write(buf []byte) (err error) {
	if w == nil {
		return
	}
	defer func() {
		if r := recover(); r != nil {
			err = &membuffers.ErrBufferOverrun{}
		}
	}()
	w.builder.Reset(){{range .MessageFields}}
	{{if .IsMessage}}err = w.builder.WriteMessage{{if .IsArray}}Array{{end}}(buf, w.{{if .IsArray}}arrayOf{{.FieldName}}(){{else}}{{.FieldName}}{{end}})
	if err != nil {
		return
	}{{else}}w.builder.Write{{.TypeAccessor}}{{if .IsArray}}Array{{end}}(buf, w.{{.FieldName}}){{end}}{{end}}
	return nil
}

func (w *{{.MessageName}}Builder) GetSize() membuffers.Offset {
	if w == nil {
		return 0
	}
	return w.builder.GetSize()
}

func (w *{{.MessageName}}Builder) CalcRequiredSize() membuffers.Offset {
	if w == nil {
		return 0
	}
	w.Write(nil)
	return w.builder.GetSize()
}

